import streamlit as st
import requests
import datetime

# 🌍 Backend endpoint on Render
BASE_URL = "https://ai-trip-planner-2-qdl4.onrender.com"

# Page config
st.set_page_config(
    page_title="🌍 Travel Planner Agentic Application",
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

# Sidebar info
with st.sidebar:
    st.markdown("## ℹ️ About")
    st.write(
        """
        This is an **AI-powered Travel Planner**.  
        Just type your query (e.g., *Plan a 3-day trip to Manali for 2 people*),  
        and get a personalized plan instantly! ✈️
        """
    )
    st.markdown("---")
    st.caption("Created by **Chethan's Travel Agent**")

# App title
st.title("🌍 Travel Planner Agentic Application")

# Prompt input
st.header("How can I help you in planning a trip?")
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input(
        "User Input",
        placeholder="e.g. Plan a trip to Goa for 5 days",
    )
    submit_button = st.form_submit_button("Send")

# Handle user query
if submit_button and user_input.strip():
    try:
        with st.spinner("🤖 Bot is preparing your travel plan..."):
            payload = {"question": user_input}
            response = requests.post(
                f"{BASE_URL}/query",
                json=payload,
                timeout=60
            )

        if response.status_code == 200:
            answer = response.json().get("answer", "⚠️ No answer returned.")
            markdown_content = f"""
# 🌍 AI Travel Plan

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Created by:** Chethan's Travel Agent  

---

{answer}

---

*This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
"""
            # Show latest plan only (no history saving)
            st.markdown(markdown_content)

        else:
            st.error(f"❌ Bot failed to respond. Status: {response.status_code}\n\n{response.text}")

    except requests.exceptions.Timeout:
        st.error("⚠️ The request timed out. Please try again later.")
    except requests.exceptions.ConnectionError:
        st.error("⚠️ Could not connect to backend. Please check if the API is live.")
    except Exception as e:
        st.error(f"⚠️ Unexpected error: {e}")
